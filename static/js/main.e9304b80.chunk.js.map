{"version":3,"sources":["components/Square.js","components/Board.js","components/helpers/Winner.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","papanKotak","React","Component","calculateWinner","lines","length","a","b","c","Game","history","stepNumber","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9304b80.chunk.js","sourcesContent":["import React from \"react\";\n\n// class Square extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       value: null\n//     };\n//   }\n//   render() {\n//     return (\n//       <button className=\"square\" onClick={() => this.state({ value: \"X\" })}>\n//         {this.state.value}\n//       </button>\n//     );\n//   }\n// }\n\nfunction Square(props) {\n  return (\n    <div>\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    </div>\n  );\n}\n\nexport default Square;\n","import React from \"react\";\n\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n  }\n  papanKotak(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.papanKotak(0)}\n          {this.papanKotak(1)}\n          {this.papanKotak(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.papanKotak(3)}\n          {this.papanKotak(4)}\n          {this.papanKotak(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.papanKotak(6)}\n          {this.papanKotak(7)}\n          {this.papanKotak(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default calculateWinner;\n","import React from \"react\";\n\nimport Board from \"./Board\";\nimport calculateWinner from \"./helpers/Winner\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Tic Tac Toe</h1>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}